[tool.poetry]
name = "mex-common"
version = "0.21.0"
description = "Common library for MEx python projects."
authors = ["RKI MEx Team <mex@rki.de>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/robert-koch-institut/mex-common"
packages = [{ include = "mex" }]

[tool.poetry.dependencies]
python = "^3.11"
backoff = "^2.2.1"
click = "^8.1.7"
langdetect = "^1.0.9"
ldap3 = "^2.9.1"
numpy = "^1.26.4"
pandas = "^2.2.0"
pyarrow = "^15.0.0"
pydantic = "^2.6.1"
pydantic-settings = "^2.1.0"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
black = "^24.2.0"
ipdb = "^0.13.13"
mex-model = { git = "https://github.com/robert-koch-institut/mex-model.git", rev = "2.2.0" }
mypy = "^1.8.0"
pandas-stubs = "^2.1.4"
pytest = "^8.0.2"
pytest-cov = "^4.1.0"
pytest-random-order = "^1.1.1"
pytest-xdist = "^3.5.0"
ruff = "^0.3.2"
sphinx = "^7.2.6"
types-ldap3 = "^2.9.13"
types-pytz = "^2024.1.0"
types-requests = "^2.31.0"
types-setuptools = "^69.1.0"

[tool.cruft]
template = "https://github.com/robert-koch-institut/mex-template"
skip = ["tests/conftest.py"]

[tool.ipdb]
context = 5

[tool.mypy]
python_version = "3.11"
show_error_codes = true
strict = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = 'langdetect.*'
ignore_missing_imports = true

[tool.pydantic-mypy]
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = [
    "--verbose",
    "--cov",
    "--no-cov-on-fail",
    "--cov-report=term-missing:skip-covered",
    "--cov-fail-under=95",
    "--cov-branch",
    "--pdbcls=IPython.terminal.debugger:TerminalPdb",
    "--random-order-bucket=global",
]
markers = "integration: mark a test as integration test"

[tool.ruff]
fix = true
show-fixes = true

[tool.ruff.lint]
ignore = [
    "D100",   # Allow missing module docstring for brevity
    "D104",   # Allow missing package docstring for brevity
    "D106",   # Allow missing nested class docstring (eg pydantic Config)
    "D203",   # Disallow blank line before class docstring (inverse of D211)
    "D213",   # Disallow multi-line docstring starting at second line (inverse of D212)
    "D406",   # Allow section name ending with newline (google style compat)
    "D407",   # Allow missing dashed underline after section (google style compat)
    "D413",   # Allow missing blank line after last section (google style compat)
    "N805",   # Allow first argument of a method to be non-self (pydantic compat)
    "N815",   # Allow mixedCase variables in class scope (model compat)
    "RUF012", # Allow mutable class attributes (pydantic compat)
]
select = [
    "A",    # Flake8 builtin shaddow
    "B",    # BugBear bug and issue finder
    "C90",  # McCabe complexity checker
    "D",    # Python docstring style checker
    "E",    # Python code style errors
    "ERA",  # Commented-out code detector
    "F",    # Pyflakes passive python checker
    "I",    # Isort import utility
    "N",    # Pep8 naming conventions
    "PERF", # Lint performance anti-patterns
    "RET",  # Flake8 return statement checker
    "RUF",  # Ruff-specific rules
    "S",    # Bandit automated security testing
    "T10",  # Flake8 debug statement checker
    "T20",  # Flake8 print statement checker
    "UP",   # PyUpgrade syntax recommender
    "W",    # Python code style warnings
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "D101", # Allow missing docstring in public class for tests
    "D102", # Allow missing docstring in public method for tests
    "D103", # Allow missing docstring in public function for tests
    "D107", # Allow missing docstring in `__init__` for tests
    "E501", # Allow line too long in tests
    "N807", # Allow mocking `__init__` for tests
    "S101", # Allow use of `assert` in tests
]

[tool.ruff.lint.isort]
known-first-party = ["mex", "tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"
